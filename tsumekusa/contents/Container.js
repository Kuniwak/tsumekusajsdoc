// This script licensed under the MIT.
// http://orgachem.mit-license.org


var tsumekusa = require('../../tsumekusa');
var array = require('../array');
var BlockContent = require('./BlockContent');
var Paragraph = require('./Paragraph');
var Tag = require('./Tag');
var Link = require('./Link');
var VimHelpContainerPublisher = require('./VimHelpContainerPublisher');



/**
 * Base class for publishing container.
 * The structure is:
 * <ul>
 * <li>Top content
 * <li>Sub contents
 *   <ul>
 *   <li>sub content 1
 *   <li>Sub content 2
 *   <li>...
 *   </ul>
 * </ul>
 *
 * @param {string} caption Caption.
 * @param {?string=} opt_refId Optional reference ID.  The ID is generated by
 *     the {@code caption}, if not given {@code opt_refId}.
 * @param {?boolean=} opt_listed Optional flag that controls a visibility on a
 *     table of contents.
 * @constructor
 * @extends {tsumekusa.publishing.BlockContent}
 */
var Container = function(caption, opt_refId, opt_visible) {
  BlockContent.call(this, opt_refHelper);
  this.setCaption(caption);
  this.tag_ = new Tag(opt_refId || this.getReferenceId());
  this.topContents_ = [];
  this.subContents_ = [];
  this.visibility_ = opt_visible || false;
};
tsumekusa.inherits(Container, BlockContent);


/**
 * Default publisher for the container.
 * @type {tsumekusa.publisher.VimHelpContainerPublisher}
 */
Container.publisher = VimHelpContainerPublisher.getInstance();


/**
 * Visibirity flag that controls a visibility on a table of contents.
 * @type {boolean}
 * @private
 */
Container.prototype.visibility_ = false;


/**
 * Parent content.
 * @type {tsumekusa.contents.Content}
 * @private
 */
Container.prototype.parent_ = null;


/**
 * Caption of the container.
 * @type {string}
 * @private
 */
Container.prototype.caption_ = null;


/**
 * Tag of the container.
 * @type {tsumekusa.contents.Tag}
 * @private
 */
Container.prototype.tag_;


/**
 * Top contents of the container.
 * @type {Array.<tsumekusa.contents.Sentence>}
 * @private
 */
Container.prototype.topContents_ = null;


/**
 * Sub contents of the container.
 * @type {Array.<tsumekusa.contents.BlockContent>}
 * @private
 */
Container.prototype.subContents_ = null;


/**
 * Whether the container allows to be listed on a table of contents.
 * @return {boolean} Whether the container allows to be listed on a table of
 *     contents.
 */
Container.prototype.isVisibleOnContentsTable = function() {
  return this.visibility_;
};


/**
 * Returns a tag of the container.
 * @return {tsumekusa.contents.Tag} Tag of the container.
 */
Container.prototype.getTag = function() {
  return this.tag_;
};


/**
 * Returns descendant contents.
 * @return {Array.<tsumekusa.publishing.Content>} Descendant contents.
 */
Container.prototype.getDescendants = function() {
  var descendants = [];
  this.getSubContainers().forEach(function(sub) {
    descendants.push(sub);
    descendants = descendants.concat(sub.getDescendants());
  });

  return descendants;
};


/**
 * Returns ancestor contents.
 * @return {Array.<tsumekusa.publishing.Content>} Ancestor contents.
 */
Container.prototype.getAncestors = function() {
  var ancestors = [];
  var current = this;

  while (current = current.getParent()) {
    ancestors.unshift(current);
  }

  return ancestors;
};


/**
 * Returns a depth of the container.
 * @return {number} Depth of the container.
 */
Container.prototype.getSelfDepth = function() {
  return this.getAncestors().length;
};


/**
 * Sets a parent content.  This method is chainable.
 * @param {tsumekusa.contents.Content} content Parent content.
 * @return {tsumekusa.contents.Container} This instance.
 * @protected
 */
Container.prototype.setParent = function(content) {
  this.parent_ = content;
  return this;
};


/**
 * Returns a parent content.
 * @return {tsumekusa.contents.Content} Parent content.
 */
Container.prototype.getParent = function() {
  return this.parent_;
};


/**
 * Returns a caption of the container.
 * @return {string} Caption of the container.
 */
Container.prototype.getCaption = function() {
  return this.caption_;
};


/**
 * Sets a caption of the container.  This method is chainable.
 * @param {string} Caption of the container.
 * Sets a reference ID.
 */
Container.prototype.setCaption = function(caption) {
  this.caption_ = caption;
  return this;
};


/**
 * Returns an index number of the content.
 * @return {number} Index of the content.
 */
Container.prototype.getSelfIndex = function() {
  var parent;
  if (parent = this.getParent()) {
    return parent.getSubContainers().indexOf(this);
  }

  return -1;
};


/**
 * Returns a reference ID.
 * @return {string} Reference ID.
 */
Container.prototype.getReferenceId = function() {
  return this.tag_ ? this.tag_.getReferenceId() : this.getReferenceIdInternal(
      this.getCaption());
};


/**
 * Returns a link to the container.
 * @return {tsumekusa.contents.Link} Link.
 */
Container.prototype.getLink = function() {
  return new Link(this.getReferenceId());
};


/**
 * Returns a reference ID by a caption.  This ID is made by the caption.  For
 * example, a caption that is {@code 'The caption example'} becomes {@code
 * 'the-caption-example'}.
 * @param {string} caption Caption.
 * @return {string} Reference ID.
 * @protected
 */
Container.prototype.getReferenceIdInternal = function(caption) {
  return caption.replace(/([a-z])([A-Z])/g, '$1_$2').replace(/\s+/g, '-').
      toLowerCase();
};


/**
 * Returns a top content.
 * @return {tsumekusa.contents.BlockContent} Top content.
 */
Container.prototype.getTopContents = function() {
  return this.topContents_;
};


/**
 * Returns top contents.
 * @return {Array.<tsumekusa.contents.BlockContent>} Top contents.
 */
Container.prototype.getTopContents = function() {
  return array.clone(this.topContents_);
};


/**
 * Returns a top content.
 * @param {number} index Index.
 * @return {tsumekusa.contents.BlockContent} Top content.
 */
Container.prototype.getTopContentAt = function(index) {
  return this.getTopContents()[index];
};


/**
 * Appends a top content to last.  This method is chainable.
 * @param {tsumekusa.contents.BlockContent} content Content to append.
 * @return {tsumekusa.contents.Container} This instance.
 */
Container.prototype.appendTopContent = function(content) {
  return this.appendTopContentAt(content, this.topContents_.length);
};


/**
 * Appends a top content by an index.  This method is chainable.
 * @param {tsumekusa.contents.BlockContent} content Content to append.
 * @param {number} index Index.
 * @return {tsumekusa.contents.Container} This instance.
 */
Container.prototype.appendTopContentAt = function(content, index) {
  this.topContents_.splice(index, 0, content);
  if (content.setParent) {
    content.setParent(this);
  }
  return this;
};


/**
 * Removes a top content by a content.
 * @param {tsumekusa.contents.BlockContent} content to remove.
 * @return {?tsumekusa.contents.BlockContent} Content was removed, if any.
 */
Container.prototype.removeTopContent = function(content) {
  var index;
  if ((index = this.topContents_.indexOf(content)) >= 0) {
    return this.removeTopContentAt(index);
  }
  return null;
};


/**
 * Removes a top content by an index.
 * @param {number} index Index.
 * @return {?tsumekusa.contents.BlockContent} Content was removed, if any.
 */
Container.prototype.removeTopContentAt = function(index) {
  var removed;
  if (this.topContents_[index]) {
    removed = this.topContents_.splice(index, 1)[0];
    if (removed.setParent) {
      removed.setParent(null);
    }
    return removed;
  }

  return null;
};


/**
 * Returns sub contents.
 * @return {Array.<tsumekusa.contents.Container>} Sub contents.
 */
Container.prototype.getSubContainers = function() {
  return array.clone(this.subContents_);
};


/**
 * Returns a sub content.
 * @param {number} index Index.
 * @return {tsumekusa.contents.Container} Sub content.
 */
Container.prototype.getSubContainerAt = function(index) {
  return this.getSubContainers()[index];
};


/**
 * Appends a sub content to last.  This method is chainable.
 * @param {tsumekusa.contents.Container} content Content to append.
 * @return {tsumekusa.contents.Container} This instance.
 */
Container.prototype.appendSubContainer = function(content) {
  return this.appendSubContainerAt(content, this.subContents_.length);
};


/**
 * Appends a sub content by an index.  This method is chainable.
 * @param {tsumekusa.contents.Container} content Content to append.
 * @param {number} index Index.
 * @return {tsumekusa.contents.Container} This instance.
 */
Container.prototype.appendSubContainerAt = function(content, index) {
  this.subContents_.splice(index, 0, content);
  if (content.setParent) {
    content.setParent(this);
  }
  return this;
};


/**
 * Removes a sub content by a content.
 * @param {tsumekusa.contents.Container} content to remove.
 * @return {?tsumekusa.contents.Container} Content was removed, if any.
 */
Container.prototype.removeSubContainer = function(content) {
  var index;
  if ((index = this.subContents_.indexOf(content)) >= 0) {
    return this.removeSubContainerAt(index);
  }
  return null;
};


/**
 * Removes a sub content by an index.
 * @param {number} index Index.
 * @return {?tsumekusa.contents.Container} Content was removed, if any.
 */
Container.prototype.removeSubContainerAt = function(index) {
  var removed;
  if (this.subContents_[index]) {
    removed = this.subContents_.splice(index, 1)[0];
    if (removed.setParent) {
      removed.setParent(null);
    }
    return removed;
  }

  return null;
};


// Exports the constructor.
module.exports = Container;
